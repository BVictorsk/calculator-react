{"ast":null,"code":"function CalculatorService() {\n  const Sum = '+';\n  const Sub = '-';\n  const Multiply = '*';\n  const Divide = '/';\n\n  function calculate(number1, number2, operation) {\n    let result;\n\n    switch (operation) {\n      case Sum:\n        result = number1 + number2;\n        break;\n\n      case Sub:\n        result = number1 - number2;\n        break;\n\n      case Multiply:\n        result = number1 * number2;\n        break;\n\n      case Divide:\n        result = number1 / number2;\n        break;\n\n      default:\n        result = 0;\n    }\n\n    return result;\n  }\n\n  function concatenateNumber(currentNumber, concatNumber) {\n    // if it contains only 0 or null, reset the value\n    if (currentNumber === '0' || currentNumber === null) {\n      currentNumber = '';\n    } //when the first digit is '.', concatenate '0' before '.' .\n\n\n    if (currentNumber === '.' && currentNumber === '') {\n      return '0.';\n    } //case '.' be typed and already contains a period, just return\n\n\n    if (concatNumber === '.' && currentNumber.indexOf('.') > -1) {\n      return currentNumber;\n    }\n\n    return currentNumber + concatNumber;\n  }\n\n  return [calculate, concatenateNumber, Sum, Sub, Multiply, Divide];\n}\n\n_c = CalculatorService;\nexport default CalculatorService;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculatorService\");","map":{"version":3,"sources":["C:/Users/brian/OneDrive/Área de Trabalho/react/calculator/src/calculator.service.js"],"names":["CalculatorService","Sum","Sub","Multiply","Divide","calculate","number1","number2","operation","result","concatenateNumber","currentNumber","concatNumber","indexOf"],"mappings":"AAAA,SAASA,iBAAT,GAA6B;AACzB,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,QAAQ,GAAG,GAAjB;AACA,QAAMC,MAAM,GAAG,GAAf;;AAEA,WAASC,SAAT,CAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,SAArC,EAAgD;AAC5C,QAAIC,MAAJ;;AAEA,YAAQD,SAAR;AACI,WAAKP,GAAL;AACIQ,QAAAA,MAAM,GAAGH,OAAO,GAAGC,OAAnB;AACA;;AACJ,WAAKL,GAAL;AACIO,QAAAA,MAAM,GAAGH,OAAO,GAAGC,OAAnB;AACA;;AACJ,WAAKJ,QAAL;AACIM,QAAAA,MAAM,GAAGH,OAAO,GAAGC,OAAnB;AACA;;AACJ,WAAKH,MAAL;AACIK,QAAAA,MAAM,GAAGH,OAAO,GAAGC,OAAnB;AACA;;AACJ;AACIE,QAAAA,MAAM,GAAG,CAAT;AAdR;;AAiBA,WAAOA,MAAP;AACH;;AAED,WAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,YAA1C,EAAwD;AACpD;AACA,QAAID,aAAa,KAAK,GAAlB,IAAyBA,aAAa,KAAK,IAA/C,EAAoD;AAChDA,MAAAA,aAAa,GAAG,EAAhB;AACH,KAJmD,CAMpD;;;AACA,QAAIA,aAAa,KAAK,GAAlB,IAAyBA,aAAa,KAAK,EAA/C,EAAmD;AAC/C,aAAO,IAAP;AACH,KATmD,CAWpD;;;AACA,QAAIC,YAAY,KAAI,GAAhB,IAAuBD,aAAa,CAACE,OAAd,CAAsB,GAAtB,IAA6B,CAAC,CAAzD,EAA4D;AACxD,aAAOF,aAAP;AACH;;AAED,WAAOA,aAAa,GAAGC,YAAvB;AACH;;AAED,SAAO,CACHP,SADG,EAEHK,iBAFG,EAGHT,GAHG,EAIHC,GAJG,EAKHC,QALG,EAMHC,MANG,CAAP;AASH;;KAzDQJ,iB;AA2DT,eAAeA,iBAAf","sourcesContent":["function CalculatorService() {\r\n    const Sum = '+';\r\n    const Sub = '-';\r\n    const Multiply = '*';\r\n    const Divide = '/';\r\n\r\n    function calculate(number1, number2, operation) {\r\n        let result;\r\n\r\n        switch (operation) {\r\n            case Sum:\r\n                result = number1 + number2;\r\n                break;\r\n            case Sub:\r\n                result = number1 - number2;\r\n                break;\r\n            case Multiply:\r\n                result = number1 * number2;\r\n                break;\r\n            case Divide:\r\n                result = number1 / number2;\r\n                break;\r\n            default:\r\n                result = 0;  \r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function concatenateNumber(currentNumber, concatNumber) {\r\n        // if it contains only 0 or null, reset the value\r\n        if (currentNumber === '0' || currentNumber === null){\r\n            currentNumber = '';\r\n        }\r\n\r\n        //when the first digit is '.', concatenate '0' before '.' .\r\n        if (currentNumber === '.' && currentNumber === '') {\r\n            return '0.';\r\n        }\r\n\r\n        //case '.' be typed and already contains a period, just return\r\n        if (concatNumber ==='.' && currentNumber.indexOf('.') > -1) {\r\n            return currentNumber;\r\n        }\r\n\r\n        return currentNumber + concatNumber;\r\n    }\r\n    \r\n    return [\r\n        calculate,\r\n        concatenateNumber,\r\n        Sum,\r\n        Sub,\r\n        Multiply,\r\n        Divide\r\n    ];\r\n\r\n}\r\n\r\nexport default CalculatorService;"]},"metadata":{},"sourceType":"module"}